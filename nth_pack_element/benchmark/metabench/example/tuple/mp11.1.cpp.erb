#include <boost/mp11/algorithm.hpp>

template<class T, std::size_t N> struct any { T value{}; };

template<auto N>
constexpr auto nth_pack_element = [](auto... args) {
  return [&]<std::size_t... Ns>(std::index_sequence<Ns...>) {
    struct : any<decltype(args), Ns>... { } _{args...};
    return static_cast<boost::mp11::mp_at_c<boost::mp11::mp_inherit<any<decltype(args), Ns>...>, N>&>(_).value;
  }
  (std::make_index_sequence<sizeof...(args)>{});
};

template <class... Ts>
[[nodiscard]] constexpr auto tuple(Ts... ts) {
    return [=](auto f) { return f(ts...); };
}

template <auto N, class T>
auto get(T& t) {
    return t([](auto... args) { return nth_pack_element<N>(args...); });
}


int main() {
#if defined(METABENCH)
  auto t = tuple(<%= (1..n).to_a.join(', ') %>);
<% (0..n-1).each do |i| %>
  get<<%= i %>>(t);
<% end %>
#endif
}
