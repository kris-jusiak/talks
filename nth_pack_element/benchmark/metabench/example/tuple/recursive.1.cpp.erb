template <auto N> requires (N == 0)
[[nodiscard]] constexpr auto nth_pack_element(auto arg, auto...) {
    return arg;
}

template <auto N> requires (N > 0)
[[nodiscard]] constexpr auto nth_pack_element(auto arg, auto... args) {
    return nth_pack_element<N - 1>(args...);
}

template <class... Ts>
[[nodiscard]] constexpr auto tuple(Ts... ts) {
    return [=](auto f) { return f(ts...); };
}

template <auto N, class T>
auto get(T& t) {
    return t([](auto... args) { return nth_pack_element<N>(args...); });
}


int main() {
#if defined(METABENCH)
  auto t = tuple(<%= (1..n).to_a.join(', ') %>);
<% (0..n-1).each do |i| %>
    get<<%= i %>>(t);
<% end %>
#endif
}
