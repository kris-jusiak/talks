// Copyright Bruno Dutra 2016
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

<% if n > 20 %>
    #define BOOST_MPL_CFG_NO_PREPROCESSED_HEADERS
    #define BOOST_MPL_LIMIT_VECTOR_SIZE <%= ((n + 9) / 10) * 10 %>
<% end %>

#include <boost/mpl/vector.hpp>
#include <boost/mpl/replace_if.hpp>
#include <boost/mpl/bool.hpp>
#include <boost/mpl/int.hpp>
namespace mpl = boost::mpl;

struct is_even {
    template<typename N>
    using apply = mpl::bool_<N::type::value % 2 == 0>;
};

<% env[:k].times do |k| %>

using <%= "xs#{k}" %> = mpl::vector<
    <%= ((k*n+1)..(k*n+n)).map { |i| "mpl::int_<#{i}>" }.join(', ') %>
>;

#if defined(METABENCH)
using <%= "result#{k}" %> = mpl::replace_if<<%= "xs#{k}" %>, is_even, void>::type;
#endif

<% end %>

int main() {}
