// Copyright Louis Dionne 2017
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

<% if n > 6 %>
    #define BOOST_FUSION_INVOKE_MAX_ARITY <%= n %>
<% end %>

#include <boost/fusion/include/invoke.hpp>
#include <boost/fusion/include/make_vector.hpp>
namespace fusion = boost::fusion;

struct f {
    template<typename ...T>
    constexpr void operator()(T const& ...) const {}
};

template<int> struct x {};

int main() {
<% env[:k].times do |k| %>
    /*constexpr*/ auto <%= "xs#{k}" %> = fusion::make_vector(
        <%= ((k*n+1)..(k*n+n)).map { |i| "x<#{i}>{}" }.join(', ') %>
    );

#if defined(METABENCH)
    fusion::invoke(f{}, <%= "xs#{k}" %>);
#endif
<% end %>
}
