// Copyright Louis Dionne 2017
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

#include <boost/hana/fwd/equal.hpp>
#include <boost/hana/fwd/first.hpp>
#include <boost/hana/fwd/hash.hpp>
#include <boost/hana/fwd/second.hpp>
#include <boost/hana/map.hpp>
#include <boost/hana/type.hpp>
namespace hana = boost::hana;

template<int> struct x {};

struct light_pair_tag {};

template<typename T, typename U>
struct light_pair {
    using First = T;
    using Second = U;
    using hana_tag = light_pair_tag;
};

namespace boost { namespace hana {
    template<>
    struct first_impl<light_pair_tag> {
        template<typename First, typename Second>
        static constexpr First apply(light_pair<First, Second> const&)
        { return First{}; }
    };

    template<>
    struct second_impl<light_pair_tag> {
        template<typename First, typename Second>
        static constexpr Second apply(light_pair<First, Second> const&)
        { return Second{}; }
    };

    template<int i, int j>
    struct equal_impl<x<i>, x<j>> {
        static constexpr hana::bool_<i == j> apply(x<i> const&, x<j> const&)
        { return {}; }
    };

    template<int i>
    struct hash_impl<x<i>> {
        static constexpr hana::type<x<i>> apply(x<i> const&) { return {}; }
    };
}} // end namespace boost::hana

struct undefined {};

int main() {
<% env[:k].times do |k| %>
#if defined(METABENCH)
    constexpr auto <%= "xs#{k}" %> = hana::make_map(<%=
        ((k*n+1)..(k*n+n)).map { |i| "light_pair<x<#{i}>, undefined>{}" }.join(', ')
    %>);
#endif
<% end %>
}
