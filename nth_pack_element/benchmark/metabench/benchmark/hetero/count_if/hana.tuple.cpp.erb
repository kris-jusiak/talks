// Copyright Louis Dionne 2017
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

#include <boost/hana/count_if.hpp>
#include <boost/hana/tuple.hpp>

#include <type_traits>
namespace hana = boost::hana;

struct is_even {
    template<typename N>
    constexpr bool operator()(N const&) const {
        return N::value % 2 == 0;
    }
};

int main() {
<% env[:k].times do |k| %>
    constexpr auto <%= "xs#{k}" %> = hana::make_tuple(
        <%= ((k*n+1)..(k*n+n)).map { |i| "std::integral_constant<int, #{i}>{}" }.join(', ') %>
    );

#if defined(METABENCH)
    constexpr auto <%= "result#{k}" %> = hana::count_if(<%= "xs#{k}" %>, is_even{});
#endif
<% end %>
}
