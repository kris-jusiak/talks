// Copyright Louis Dionne 2017
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

#include <boost/fusion/include/fold.hpp>
#include <boost/fusion/include/make_vector.hpp>
namespace fusion = boost::fusion;

struct f {
    template<typename State, typename X>
    constexpr X operator()(State, X x) const { return x; }
};

struct state {};

template<int> struct x {};

int main() {
<% env[:k].times do |k| %>
    /*constexpr*/ auto <%= "xs#{k}" %> = fusion::make_vector(
        <%= ((k*n+1)..(k*n+n)).map { |i| "x<#{i}>{}" }.join(', ') %>
    );

#if defined(METABENCH)
    /*constexpr*/ auto <%= "result#{k}" %> = fusion::fold(<%= "xs#{k}" %>, state{}, f{});
#endif
<% end %>
}
